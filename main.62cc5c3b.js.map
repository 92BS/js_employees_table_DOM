{"version":3,"sources":["scripts/main.js"],"names":["table","document","querySelector","headers","tHead","rows","cells","tbody","tBodies","tableRows","sortTable","columnIndex","sortOrder","sort","rowA","rowB","cellA","querySelectorAll","textContent","cellB","localeCompare","undefined","numeric","innerHTML","append","forEach","header","index","addEventListener","currentOrder","newOrder","getAttribute","setAttribute","classList","toggle","row","r","remove","add","form","createElement","createLabelElement","label","innerElement","labelElement","appendChild","createTextNode","createInputElement","inputName","inputType","inputElement","createSelectElement","dataQa","options","select","option","optionElement","value","officeSelect","nameInput","positionInput","ageInput","salaryInput","submitButton","showNotification","title","description","className","notification","notificationTitle","notificationDescription","body","setTimeout","validateData","nameInputValue","ageInputValue","positionInputValue","salaryInputValue","length","isNaN","parseFloat","type","e","preventDefault","newRow","insertRow","convertedSalary","Intl","NumberFormat","format","push","reset"],"mappings":"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","file":"main.62cc5c3b.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst table = document.querySelector('table');\nconst headers = [...table.tHead.rows[0].cells];\n// const thead = document.querySelector('thead');\nconst tbody = table.tBodies[0];\nconst tableRows = [...tbody.rows];\n\n// Implement table sorting by clicking on the title (in two directions)\n\nfunction sortTable(columnIndex, sortOrder) {\n  tableRows.sort((rowA, rowB) => {\n    const cellA = rowA.querySelectorAll('td')[columnIndex].textContent;\n    const cellB = rowB.querySelectorAll('td')[columnIndex].textContent;\n\n    if (sortOrder === 'asc') {\n      return cellA.localeCompare(cellB, undefined, { numeric: true });\n    } else {\n      return cellB.localeCompare(cellA, undefined, { numeric: true });\n    }\n  });\n\n  tbody.innerHTML = '';\n\n  tbody.append(...tableRows);\n}\n\nheaders.forEach((header, index) => {\n  header.addEventListener('click', () => {\n    const currentOrder = header.getAttribute('data-order');\n    const newOrder = currentOrder === 'asc' ? 'desc' : 'asc';\n\n    header.setAttribute('data-order', newOrder);\n\n    header.classList.toggle('asc', newOrder === 'asc');\n    header.classList.toggle('desc', newOrder === 'desc');\n\n    sortTable(index, newOrder);\n  });\n});\n\n// When user clicks on a row, it should become selected.\n\ntableRows.forEach((row) => {\n  row.addEventListener('click', () => {\n    tableRows.forEach((r) => r.classList.remove('active'));\n\n    row.classList.add('active');\n  });\n});\n\n// Write a script to add a form to the document.\n// Form allows users to add new employees to the spreadsheet.\n// Show notification if form data is invalid\n\nconst form = document.createElement('form');\n\nform.classList.add('new-employee-form');\n\nfunction createLabelElement(label, innerElement) {\n  const labelElement = document.createElement('label');\n\n  labelElement.appendChild(document.createTextNode(label));\n\n  labelElement.appendChild(innerElement);\n\n  return labelElement;\n}\n\nfunction createInputElement(inputName, inputType) {\n  const inputElement = document.createElement('input');\n\n  inputElement.setAttribute('name', inputName);\n  inputElement.setAttribute('type', inputType);\n  inputElement.setAttribute('data-qa', inputName);\n\n  return inputElement;\n}\n\nfunction createSelectElement(dataQa, options) {\n  const select = document.createElement('select');\n\n  select.setAttribute('data-qa', dataQa);\n\n  options.forEach(option => {\n    const optionElement = document.createElement('option');\n\n    optionElement.value = option;\n    optionElement.textContent = option;\n    select.appendChild(optionElement);\n  });\n\n  return select;\n}\n\nconst officeSelect = createLabelElement('Office:', createSelectElement('office',\n  ['Tokyo', 'Singapore', 'London', 'New York', 'Edinburgh', 'San Francisco']));\nconst nameInput = createLabelElement('Name:',\n  createInputElement('name', 'text'));\nconst positionInput = createLabelElement('Position:',\n  createInputElement('position', 'text'));\nconst ageInput = createLabelElement('Age:',\n  createInputElement('age', 'number'));\nconst salaryInput = createLabelElement('Salary:',\n  createInputElement('salary', 'number'));\n\nconst submitButton = document.createElement('button');\n\nsubmitButton.type = 'submit';\nsubmitButton.textContent = 'Save to table';\n\nform.append(nameInput, positionInput,\n  officeSelect, ageInput, salaryInput, submitButton);\n\ndocument.body.appendChild(form);\n\nfunction showNotification(title, description, className) {\n  const notification = document.createElement('div');\n\n  notification.setAttribute('data-qa', 'notification');\n  notification.className = `notification`;\n  notification.classList.add(className);\n\n  const notificationTitle = document.createElement('h3');\n\n  notificationTitle.textContent = title;\n\n  const notificationDescription = document.createElement('p');\n\n  notificationDescription.textContent = description;\n\n  notification.appendChild(notificationTitle);\n  notification.appendChild(notificationDescription);\n\n  document.body.appendChild(notification);\n\n  setTimeout(() => {\n    notification.remove();\n  }, 3000);\n}\n\nfunction validateData(nameInputValue, ageInputValue,\n  positionInputValue, salaryInputValue) {\n  if (nameInputValue.length < 4) {\n    showNotification('Error', 'Name should have at least 4 letters', 'error');\n\n    return false;\n  }\n\n  if (ageInputValue < 18 || ageInputValue > 90) {\n    showNotification('Error', 'Age should be between 18 and 90', 'error');\n\n    return false;\n  }\n\n  if (positionInputValue === '') {\n    showNotification('Error', 'Position should not be empty', 'error');\n\n    return false;\n  }\n\n  if (salaryInputValue === '' || salaryInputValue === '0'\n  || isNaN(salaryInputValue) || parseFloat(salaryInputValue) <= 0) {\n    showNotification('Error', 'Invalid salary value', 'error');\n\n    return false;\n  }\n\n  return true;\n}\n\nform.addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  const nameInputValue = nameInput.querySelector('input').value;\n  const ageInputValue = ageInput.querySelector('input').value;\n  const positionInputValue = positionInput.querySelector('input').value;\n  const salaryInputValue = salaryInput.querySelector('input').value;\n\n  if (validateData(nameInputValue, ageInputValue,\n    positionInputValue, salaryInputValue)) {\n    const newRow = tbody.insertRow();\n    const convertedSalary = '$' + new Intl.NumberFormat('en-US')\n      .format(salaryInputValue);\n\n    newRow.innerHTML = `\n      <td>${nameInputValue}</td>\n      <td>${positionInput.querySelector('input').value}</td>\n      <td>${officeSelect.querySelector('select').value}</td>\n      <td>${ageInputValue}</td>\n      <td>${convertedSalary}</td>\n    `;\n\n    tableRows.push(newRow);\n\n    showNotification('Success', 'New employee added to the table', 'success');\n\n    form.reset();\n  }\n});\n"]}